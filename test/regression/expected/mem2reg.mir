define i64 @fun_call() {
entry:
  %0 = alloca i64
  store i64 0, ptr %0
  br label 1

1:
  %2 = load ptr %0
  ret i64 %2
}

define i64 @mem2reg_basic() {
entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 1, ptr %1
  %2 = alloca i64
  store i64 2, ptr %2
  %3 = alloca i64
  store i64 3, ptr %3
  %4 = alloca i64
  %5 = load ptr %1
  %6 = load ptr %2
  %7 = add i64 %5, i64 %6
  store i64 %7, ptr %4
  %8 = alloca i64
  %9 = load ptr %3
  %10 = load ptr %1
  %11 = sub i64 %9, i64 %10
  store i64 %11, ptr %8
  %12 = alloca i64
  %13 = load ptr %4
  %14 = load ptr %8
  %15 = mul i64 %13, i64 %14
  store i64 %15, ptr %12
  %16 = alloca i64
  %17 = load ptr %4
  %18 = and i64 %17, i64 1
  store i64 %18, ptr %16
  %19 = alloca i64
  %20 = call i64 @fun_call
  store i64 %20, ptr %19
  %21 = load ptr %16
  store i64 %21, ptr %0
  br label 22

22:
  %23 = load ptr %0
  ret i64 %23
}

define i64 @mem2reg_branching() {
entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 0, ptr %1
  %2 = load ptr %1
  br i64 %2, label 3, label 8

3:
  store i64 1, ptr %1
  %4 = load ptr %1
  br i64 %4, label 5, label 6

5:
  store i64 2, ptr %1
  br label 7

6:
  store i64 3, ptr %1
  br label 7

7:
  store i64 4, ptr %1
  br label 9

8:
  store i64 5, ptr %1
  br label 9

9:
  store i64 6, ptr %1
  %10 = load ptr %1
  store i64 %10, ptr %0
  br label 11

11:
  %12 = load ptr %0
  ret i64 %12
}

define i64 @mem2reg_while() {
entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 123, ptr %1
  %2 = alloca i64
  store i64 456, ptr %2
  %3 = alloca i64
  store i64 789, ptr %3
  br label 4

4:
  %5 = load ptr %2
  br i64 %5, label 6, label 13

6:
  %7 = alloca i64
  store i64 432, ptr %7
  %8 = load ptr %1
  %9 = load ptr %7
  %10 = add i64 %8, i64 %9
  store i64 %10, ptr %1
  %11 = load ptr %2
  %12 = sub i64 %11, i64 2
  store i64 %12, ptr %2
  br label 4

13:
  %14 = load ptr %2
  br i64 %14, label 15, label 17

15:
  %16 = load ptr %2
  store i64 %16, ptr %0
  br label 18

17:
  store i64 987654321, ptr %0
  br label 18

18:
  %19 = load ptr %0
  ret i64 %19
}

define i64 @mem2reg_negative() {
entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = add i64 6, i64 7
  store i64 %2, ptr %1
  %3 = load ptr %1
  store i64 %3, ptr %0
  br label 4

4:
  %5 = load ptr %0
  ret i64 %5
}
