int fun_call() {
    __entry:
    return 0;
}

int mem2reg_basic() {
    __entry:
    int a_1;
    a_1 = 1;
    int b_1;
    b_1 = 2;
    int c_1;
    c_1 = 3;
    int add_1;
    add_1 = a_1 + b_1;
    int sub_1;
    sub_1 = c_1 - a_1;
    int mul_1;
    mul_1 = add_1 * sub_1;
    int bit_and_1;
    bit_and_1 = add_1 & 1;
    int call_1;
    call_1 = fun_call();
    return bit_and_1;
}

int mem2reg_branching() {
    __entry:
    int res_1;
    res_1 = 0;
    goto_if (res_1) __if_t __if_f;
    __if_t:
    res_1 = 1;
    goto_if (res_1) __if_t1 __if_f1;
    __if_t1:
    res_1 = 2;
    goto __if_cont1;
    __if_f1:
    res_1 = 3;
    __if_cont1:
    res_1 = 4;
    goto __if_cont;
    __if_f:
    res_1 = 5;
    __if_cont:
    res_1 = 6;
    return res_1;
}

int mem2reg_while() {
    __entry:
    int mem_1;
    mem_1 = 123;
    int to_1;
    to_1 = 456;
    int reg_1;
    reg_1 = 789;
    __while_cond:
    goto_if (to_1) __while_body __while_cont;
    __while_body:
    int reg_2;
    reg_2 = 432;
    mem_1 = mem_1 + reg_2;
    to_1 = to_1 - 2;
    goto __while_cond;
    __while_cont:
    goto_if (to_1) __if_t __if_cont;
    __if_t:
    return to_1;
    __if_cont:
    return 987654321;
}

int mem2reg_negative() {
    __entry:
    int a_1;
    a_1 = 6 + 7;
    return a_1;
}
